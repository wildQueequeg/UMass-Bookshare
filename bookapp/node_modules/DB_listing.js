var Sequelize = require("sequelize");
var exports = module.exports = {};
var DB_Interface = require("DB_Interface");
var uuid = require("uuid");
var sequelize = DB_Interface.getServer;
var bookInterface = require("DB_book");
var bookTable = bookInterface.table;
var userInterface = require("DB_user");
var userTable = userInterface.table;

var ListTable = sequelize.define("listing",{
	listid :{ 
		type : Sequelize.STRING(32),
        primaryKey: true,
	},
	username: {
		type: Sequelize.STRING(20),
	},
	isbn13: Sequelize.STRING(13),
	forrent: Sequelize.BOOLEAN,
	rentprice: Sequelize.STRING(10), // What type?
	forsale: Sequelize.BOOLEAN,
	sellprice: Sequelize.STRING(10),	// What type??
	forborrow: Sequelize.BOOLEAN,
	available: Sequelize.BOOLEAN,
	description: Sequelize.STRING(500),
	listdate: Sequelize.DATE},
	{
		timestamps: false,
    	freezeTableName: true,
    	tableName: "listing"
	}
	);

ListTable.belongsTo(bookTable, { foreignKey: "isbn13" });
ListTable.belongsTo(userTable, { foreignKey: "username" });

exports.makeListing = function makeListing_(username_, isbn13_, forRent_, rentPrice_, forSale_, sellPrice_, forBorrow_, available_, description_, function_)
{
	listID_ = uuid.generateUUID().substring(0,32);
	var d = new Date();
	found = ListTable.findOrCreate({where : {listid : listID_},
		defaults:{
			listid : listID_,
			username : username_,
			isbn13 : isbn13_,
			forrent : forRent_,
			rentprice : rentPrice_,
			forsale : forSale_,
			sellprice : sellPrice_,
			forborrow : forBorrow_,
			available : true,
			description : description_,
			listdate : d.toString(d.getTime())
		}
	});
	found.then(function(record){
		if(record[0].options.isNewRecord){
			function_(record);
		}
		else{
			// makeListing_(username_, isbn13_, forRent, forSale, forBorrow_, function_); //try again w/ another UUID, lol, what are the odds? (functionally 0).
			makeListing_(username_, isbn13_, forRent, rentPrice, forSale, sellPrice, forBorrow, description, function_); 
		}
	});
}

exports.getListing = function getListing_(listid_, function_)
{
	found = ListTable.findOne(
		{where : {listid : listid_},
	});
	found.then(function(record){
		var listValues = null;
		if(record != null)
		{
			listValues = {
				listid : record.dataValues.listid,
				username : record.dataValues.username.trim(),
				isbn13 : record.dataValues.isbn13,
				forrent : record.dataValues.forrent,
				rentprice : record.dataValues.rentprice,
				forsale : record.dataValues.forsale,
				sellprice : record.dataValues.sellprice,
				forborrow : record.dataValues.forborrow,
				available : record.dataValues.available,
				description : record.dataValues.description.trim(), // Is description a keyword??? -amy
				listdate : record.dataValues.listdate
			}
		}
		function_(listValues);
	});
}

exports.findUsersListing = function findUserListing_(username_, function_)
{
	found = ListTable.findAll(
		{where : [{username : username_}, {available : true}]
	});
	found.then(function(record) {
		if(record != null)
		{
			var listValues = [];
			for(var i = 0; i < record.length; i++){
				listValues[i] = {
					listid : record[i].dataValues.listid,
					username : record[i].dataValues.username.trim(),
					isbn13 : record[i].dataValues.isbn13,
					forrent : record[i].dataValues.forrent,
					rentprice : record[i].dataValues.rentprice,
					forsale : record[i].dataValues.forsale,
					sellprice : record[i].dataValues.sellprice,
					forborrow : record[i].dataValues.forborrow,
					available : record[i].dataValues.available,
					description : record[i].dataValues.description.trim(),
					listdate : record[i].dataValues.listdate
				}
			}
			function_(listValues);
		}
	});
}

exports.findBookListing = function findBookListing_(isbn13_, function_)
{
	found = ListTable.findAll(
		{where : [{isbn13 : isbn13_}, {available : true}]
	});
	found.then(function(record) {
		if(record != null)
		{
			var listValues = [];
			for(var i = 0; i < record.length; i++){
				listValues[i] = {
					listid : record[i].dataValues.listid,
					username : record[i].dataValues.username.trim(),
					isbn13 : record[i].dataValues.isbn13,
					forrent : record[i].dataValues.forrent,
					rentprice : record[i].dataValues.rentprice,
					forsale : record[i].dataValues.forsale,
					sellprice : record[i].dataValues.sellprice,
					forborrow : record[i].dataValues.forborrow,
					available : record[i].dataValues.available,
					description : record[i].dataValues.description.trim(),
					listdate : record[i].dataValues.listdate
				}
			}
			function_(listValues);
		}
	});
}

exports.postBookListing = function findBookListing_(isbn13_, res_)
{
	var found = sequelize.query(
			"SELECT * FROM listing WHERE isbn13 = \'" +isbn13_+ "\';", ListTable
			 );
	found.then(function(record) {
		// console.log("ROWCOUNT : " + record[1].rowCount);
		if(record != null)
		{
			var listValues = [];
			for(var i = 0; i < record[1].rowCount; i++){
				listValues[i] = {
					//do we need to put price in here?
					listid : record[0][i].listid,
					username : record[0][i].username.trim(),
					isbn13 : record[0][i].isbn13,
					forrent : record[0][i].forrent,
					rentprice : record[0][i].rentprice,
					forsale : record[0][i].forsale,
					sellprice : record[0][i].sellprice,
					forborrow : record[0][i].forborrow,
					available : record[0][i].available,
					description : record[0][i].description,
					listdate : record[0][i].listdate
				}
			}
			hi = listValues;
			res_.render('../views/searchResult', hi);
		}
	});
}

exports.recentListing = function recentListing_(res_,req_)
{
	var found = sequelize.query(
		// Add version
		"Select listing.listid, listing.rentprice, listing.sellprice, listing.description, book.author, book.title, book.isbn13, book.version FROM listing INNER JOIN book ON book.isbn13=listing.isbn13 ORDER BY listdate desc;");

	found.then(function(record) {
		console.log(record[1].rowCount);
		if(record != null)
		{
			var listValues = [];
			for(var i = 0; i < record[1].rowCount; i++){
				listValues[i] = {
					listid : record[0][i].listid,
					author : record[0][i].author,
					title  : record[0][i].title,
					isbn13  : record[0][i].isbn13,
					version : record[0][i].version,
					rentprice  : record[0][i].rentprice,
					sellprice  : record[0][i].sellprice,
					description : record[0][i].description,
				}
			}
			recent = listValues;
			res_.render('../views/home', recent);
		}
	});
}

exports.makenotAvailable = function notAvailable_(listid_, function_)
{
	// found = ListTable.findOne(
	// 	{where : {listid : listid_},
	// });
	// found.then(function(record){
	// 	console.log(typeof function_ + " sfasdfasdfsda");
	// 	if(found){
	// 		console.log(typeof found + " dddsfasdfasdfsda");
	// 		found2 = found.updateAttributes({available : false});
	// 		console.log(typeof found2 + " daaaaddsfasdfasdfsda");
	// 		if(found2){
	// 			found2.then(function(record2){
	// 					console.log(typeof function_ + "sfasdfasdfsda");
	// 					function_(record2);
	// 				});
	// 		}
	// 	}
	// });

	var found3 = sequelize.query("UPDATE listing SET available = \'false\'  WHERE listid = \'" + listid_ +"\';", ListTable);
	found3.then(function(record){
		if(typeof function_ == "function"){}
			function_(record);
	});
}